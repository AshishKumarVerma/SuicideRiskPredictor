# -*- coding: utf-8 -*-
"""btechproject.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1x5I9CPoonWAUpgCab7NJfd50OuwCBRKs
"""

# Importing necessary libraries
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score

# Assuming you have a dataset in CSV format with features and target variable
# Load the dataset
import pandas as pd

# Now you can read the CSV file
data = pd.read_csv('https://raw.githubusercontent.com/AshishKumarVerma/SuicideRiskPredictor/main/data_100000.csv')
data.head()
data.shape

# Assuming 'Output Score' is the target variable column name
y = data['Output Score'] # Target variable
y_new = []
for i in y:
  if 9<=i<=32:
    y_new.append(0)
  elif 33<=i<=40:
    y_new.append(1)
  elif 41<=i<=45:
    y_new.append(2)
  elif 46<=i<=51:
    y_new.append(3)
  else:
    y_new.append(4)


data["y_new"] = y_new

X = data.drop('y_new',axis=1)
y = data["y_new"]

# Split the data into training and testing sets
from sklearn.model_selection import train_test_split

# Assuming you have already defined your features X and target variable y

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

X_train

y_train

# Initialize the Random Forest Classifier
from sklearn.ensemble import RandomForestClassifier

# Now you can initialize the Random Forest Classifier
rf_classifier = RandomForestClassifier()

# Train the classifier on the training data
rf_classifier.fit(X_train, y_train)

# X_train

# y_train

# Make predictions on the testing data
from sklearn.ensemble import RandomForestClassifier

# Assuming you have already defined your features X_train, X_test and target variable y_train, y_test

# Initialize the Random Forest Classifier
rf_classifier = RandomForestClassifier()

# Fit the classifier to the training data
rf_classifier.fit(X_train, y_train)

# Now you can make predictions on the testing data
predictions = rf_classifier.predict(X_test)

predictions

y_test

# Calculate the accuracy of the model
from sklearn.metrics import accuracy_score

# Assuming you have already calculated predictions using your model

# Calculate the accuracy of the model
accuracy = accuracy_score(y_test, predictions)
print("Accuracy:", accuracy)

pip install gradio

import joblib

model = joblib.load('https://colab.research.google.com/drive/1x5I9CPoonWAUpgCab7NJfd50OuwCBRKs?usp=sharing')

def predict(numeric):
    prediction = model.predict(numeric)
    return prediction